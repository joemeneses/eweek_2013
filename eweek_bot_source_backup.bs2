' Robotics with the Boe-Bot - EepromNavigation.bs2
' Navigate using characters stored in EEPROM.
' {$STAMP BS2}                                ' Stamp directive.
' {$PBASIC 2.5}                               ' PBASIC directive.

DEBUG "Program Running!"

' -----[ Variables ]----------------------------------------------------------

pulseCount VAR Word                           ' Stores number of pulses.
address VAR Byte                              ' Stores EEPROM address.
instruction VAR Byte                          ' Stores EEPROM instruction.

' -----[ EEPROM Data ]--------------------------------------------------------

' Address: 0123456789                         ' These two commented lines show
'          ||||||||||                         ' EEPROM address of each datum.
' insert_next_line
DATA      "FRFRFRFQ"                        ' Navigation instructions.


'FFPRPFPRPFFPLPFFPLPFPLPFPRPFPRPFFPRPFFPQ
'FFRFRFFLFFLFLFRFRFFRFFQ

' -----[ Initialization ]-----------------------------------------------------

FREQOUT 4, 2000, 3000                         ' Signal program start/reset.

' -----[ Main Routine ]-------------------------------------------------------

DO UNTIL (instruction = "Q")

  READ address, instruction                   ' Data at address in instruction.
  address = address + 1                       ' Add 1 to address for next read.

  SELECT instruction                          ' Call a different subroutine
    CASE "F": GOSUB Forward                   ' for each possible character
    CASE "B": GOSUB Backward                  ' that can be fetched from
    CASE "L": GOSUB Left_Turn                 ' EEPROM.
    CASE "R": GOSUB Right_Turn
    CASE "Q": GOSUB end_pro
    CASE "P": GOSUB Pausa
  ENDSELECT

  GOSUB Pausa

LOOP

' -----[ Subroutine - Forward ]-----------------------------------------------

Forward: ' Forward subroutine.
FOR pulseCount = 1 TO 50 ' Send 64 forward pulses.
PULSOUT 13, 850 ' 1.7 ms pulse to left servo.
PULSOUT 12, 650 ' 1.3 ms pulse to right servo.
PAUSE 20 ' Pause for 20 ms.
NEXT
RETURN ' Return to Main Routine loop.

' -----[ Subroutine - Backward ]----------------------------------------------

Backward: ' Backward subroutine.
FOR pulseCount = 1 TO 22 ' Send 64 backward pulses.
PULSOUT 13, 650 ' 1.3 ms pulse to left servo.
PULSOUT 12, 850 ' 1.7 ms pulse to right servo.
PAUSE 20 ' Pause for 20 ms.
NEXT
RETURN ' Return to Main Routine loop.

' -----[ Subroutine - Left_Turn ]---------------------------------------------

Left_Turn: ' Left turn subroutine.
FOR pulseCount = 1 TO 20 ' Send 24 left rotate pulses.
PULSOUT 13, 630 ' 1.3 ms pulse to left servo.
PULSOUT 12, 705 ' 1.3 ms pulse to right servo.
PAUSE 20 ' Pause for 20 ms.
NEXT
RETURN ' Return to Main Routine loop.

' -----[ Subroutine – Right_Turn ]--------------------------------------------

Right_Turn: ' right turn subroutine.
FOR pulseCount = 1 TO 18 ' Send 24 right rotate pulses.
PULSOUT 13, 850 ' 1.7 ms pulse to left servo.
PULSOUT 12, 850 ' 1.7 ms pulse to right servo.
PAUSE 20 ' Pause for 20 ms.
NEXT

RETURN ' Return to Main Routine section.

' -----[ Subroutine - pause ]----------------------------------------------

Pausa: ' Pause subroutine.
PULSOUT 13, 750 ' 1.3 ms pulse to left servo.
PULSOUT 12, 750 ' 1.7 ms pulse to right servo.
PAUSE 500 ' Pause for 20 ms.
RETURN ' Return to Main Routine loop.

end_pro:
  PULSOUT 12, 750
  PULSOUT 13, 750
  PAUSE 20
END